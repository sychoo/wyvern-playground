//tests that parsing of both [case of A] and [comprises A, B ... N] works 

tagged class Dyn [comprises DynNum, DynChar]
    class def create() : X             
        new                            
           
tagged class DynNum [case of Dyn] [comprises DynInt, DynDouble]        
    class def create() : DynNum        
        new         
                                       
tagged class DynInt [case of DynNum]      
    class def create() : DynInt        
        new                            

tagged class DynDouble [case of DynNum]      
    class def create() : DynDouble        
        new                     
                                       
tagged class DynChar [case of Dyn]     
    class def create() : DynChar       
        new                            
                                       
val i = DynInt.create()                
                                       
match(i):                              
   DynInt => 10
   DynChar => 15
   default => 15