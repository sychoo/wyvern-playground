module def LightPubSubIface_provides_init_(node_name: String, python: Python, stdout: Stdout)

import python:rclpy
import python:sys

import wyvern.option

import Node_

type Option = option.Option

/*resource type Publisher
	def publish(v: Dyn): Unit*/

var node: Option[Node_] = option.None[Node_]()

def printErrMsgAndExit(msg: String): Unit
	stdout.print(msg)
	stdout.print("\n")
	sys.exit(1)

def get_node(): Node_
	node.isDefined.ifTrue(() => unit, () => printErrMsgAndExit("Node is not set"))
	val dummy_node: Node_ = new
		def create_subscription(msg_type: Dyn, topic_name: String, callback: Dyn): Dyn
			/*new
				def publish(v: Dyn): Unit
					stdout.print("Control should never reach here")
					sys.exit(1)*/
			stdout.print("Control should never reach here")
			sys.exit(1)
	node.getOrElse(() => dummy_node)

def init(): Unit
	rclpy.init()
	node = option.Some[Node_](rclpy.create_node(node_name))
