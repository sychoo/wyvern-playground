require java
import fileSystem
import stdout
import wyvern.option
type Option = option.Option
val filesys = fileSystem(java)
val out = stdout(java)

val f = filesys.fileFor("example.txt")         //should this create the file in itself? or only make existing?

val w = f.makeWriter()                       //automatically creates file
w.write("Hello World!")


w.close()

val ap = f.makeAppender()

ap.write("\nfoo")

ap.close()

val r = f.makeReader()

//out.print(r.readFully())
out.print(r.readLine().getOrElse(() => ""))
out.println()
out.print(r.readLine().getOrElse(() => ""))
out.println()

r.close()

val fe = filesys.fileFor("empty.txt")
out.print("/** READ FULLY TEST **/")
out.println()
val re = fe.makeReader()
out.print("made reader")
out.println()
out.print(re.readFully())
out.println()
re.close()


/* Random Access File */

/* options: "r" read only, "rw" read/write, "rws" content & metadata written synchronously,
 * "rwd" content written synchronously
 */
val raf = f.makeRandomAccessFile("rw")

out.printInt(raf.getPosition())
out.println()

//raf.seek(5)
//raf.seek(1)
raf.write("what")
out.print(raf.readLine())
raf.write("help")
raf.seek(0)
out.print(raf.readLine())
out.println()


raf.close()

/* Binary Reader */

out.print("/** BINARY READER TESTS **/")
out.println()


val fb = filesys.fileFor("binary.txt")

val bw = fb.makeBinaryWriter()

bw.write(1797693134862315907729305190789024733617976978942306572734300811577326758055009631327084773224075360211201138798713933576587897688144166224928474306394741243777678934248654852763022196012460941194530829520850057688381506823424628814739131105408272371633505106845862982399472459384797163048353563296242241372167890)

bw.writeUTF("ab!")

val br = fb.makeBinaryReader()

out.printInt(br.read())
out.println()

val s = br.readUTF()
val s = "\"" + s + br.readUTF() + br.readUTF() +"\""
out.print(s)
//out.print(br.readUTF())
//out.print(br.readUTF())
out.println()

br.close()
bw.close()


