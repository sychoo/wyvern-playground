module def from_protobuf(support: PlatformSupport) : {}

import wyvern.collections.list
import wyvern.option
import wyvern.runtime

import wyb_ast

type List = list.List
type Option = option.Option

def typeDescFromProtobuf(protobufTypeDesc: Dyn): wyb_ast.TypeDesc
    var ext: Option[String] = option.None[String]()
    if (protobufTypeDesc.hasExtends())
        ext = option.Some[String](protobufTypeDesc.getExtends())
    val t = protobufTypeDesc.getType()
    //TODO: tag
    wyb_ast.TypeDesc(ext, typeFromProtobuf(t), option.None[wyb_ast.Tag]())

def typeFromProtobuf(protobufType: Dyn): wyb_ast.Type
    if (protobufType.hasCompoundType())
            val ct = protobufType.getCompoundType()
            val b = typeFromProtobuf(ct.getBase())
            val selfName = ct.getSelfName()
            // TODO: real declTypes
            val dts = list.make[wyb_ast.DeclType]()
            // TODO: real statefulness
            val stateful = false
            wyb_ast.CompoundType(b, selfName, dts, stateful)
        elif (protobufType.hasPath())
            val p = protobufType.getPath()
            wyb_ast.TypePath(p)
        elif (protobufType.hasSimpleType())
            //TODO: real simple types
            wyb_ast.TTop()



def statementFromProtobuf(protobufStatement: Dyn): wyb_ast.Statement
    if (protobufStatement.hasDeclaration())
            val d = protobufStatement.getDeclaration()
            wyb_ast.D(declarationFromProtobuf(d))
        elif (protobufStatement.hasExpression())
            val e = protobufStatement.getExpression()
            wyb_ast.E(expressionFromProtobuf(e))
        else
            runtime.fail("Invalid proto statement type")

def argumentFromProtobuf(protobufArgument: Dyn): wyb_ast.Argument
    val t = typeFromProtobuf(protobufArgument.getType())
    wyb_ast.Argument(protobufArgument.getVariable(), t)

def declarationFromProtobuf(protobufDeclaration: Dyn): wyb_ast.Declaration
    if (protobufDeclaration.hasVariableDeclaration())
            val d = protobufDeclaration.getVariableDeclaration()
            val dt = d.getDeclarationType()
            val v = d.getVariable()
            val t = typeFromProtobuf(d.getType())
            val e = expressionFromProtobuf(d.getInitializer())
            wyb_ast.VariableDeclaration(dt, v, t, e)
        elif (protobufDeclaration.hasMethodDeclaration())
            val md = protobufDeclaration.getMethodDeclaration()
            val mn = md.getMethodName()
            val al: List[Dyn] = support.dynToList(md.getArgumentsList())
            val args = al.map[wyb_ast.Argument]((a: Dyn) => argumentFromProtobuf(a))
            val rt = typeFromProtobuf(md.getReturnType())
            val body = expressionFromProtobuf(md.getBody())
            wyb_ast.MethodDeclaration(mn, args, rt, body, false)
        elif (protobufDeclaration.hasTypeDeclaration())
            val td = protobufDeclaration.getTypeDeclaration()
            val n = td.getName()
            val t = typeDescFromProtobuf(td.getTypeDesc())
            wyb_ast.TypeDeclaration(n, t)
        else
            runtime.fail("Invalid proto declaration type")

def expressionFromProtobuf(protobufExpression: Dyn): wyb_ast.Expression
    if (protobufExpression.hasVariable())
            val v = protobufExpression.getVariable()
            wyb_ast.Var(v)
        elif (protobufExpression.hasLiteral())
            val l = protobufExpression.getLiteral()
            if (l.hasIntegerLiteral())
                    wyb_ast.IntegerLiteral(support.byteStringToInt(l.getIntegerLiteral()))
                elif (l.hasStringLiteral())
                    wyb_ast.StringLiteral(l.getStringLiteral())
                elif (l.hasBooleanLiteral())
                    wyb_ast.BooleanLiteral(l.getBooleanLiteral())
                elif (l.hasFloatLiteral())
                    wyb_ast.FloatLiteral(l.getFloatLiteral())
                else
                    runtime.fail("Unsupported literal")
        elif (protobufExpression.hasNewExpression())
            val n = protobufExpression.getNewExpression()
            val t = typeFromProtobuf(n.getType())
            val v = n.getSelfName()
            val dl: List[Dyn] = support.dynToList(n.getDeclarationsList())
            val ds = dl.map[wyb_ast.Declaration]((d: Dyn) => declarationFromProtobuf(d))
            wyb_ast.NewExpression(t, v, ds)
        elif (protobufExpression.hasCallExpression())
            val c = protobufExpression.getCallExpression()
            val receiver = expressionFromProtobuf(c.getReceiver())
            val method = c.getMethod()
            val al: List[Dyn] = support.dynToList(c.getArgumentsList())
            val arguments = al.map[wyb_ast.Expression]((e: Dyn) => expressionFromProtobuf(e))
            val isTailCall = c.getIsTailCall()
            wyb_ast.CallExpression(receiver, method, arguments, isTailCall)
        elif (protobufExpression.hasStaticCallExpression())
            val sc = protobufExpression.getStaticCallExpression()
            val receiver = expressionFromProtobuf(sc.getReceiver())
            val method = sc.getMethod()
            val receiverType = sc.getReceiverType()
            val al: List[Dyn] = support.dynToList(sc.getArgumentsList())
            val arguments = al.map[wyb_ast.Expression]((e: Dyn) => expressionFromProtobuf(e))
            wyb_ast.StaticCallExpression(receiver, receiverType, method, arguments)
        elif (protobufExpression.hasSequenceExpression())
            val se = protobufExpression.getSequenceExpression()
            val sl: List[Dyn] = support.dynToList(se.getStatementsList())
            val statements = sl.map[wyb_ast.Statement]((s: Dyn) => statementFromProtobuf(s))
            wyb_ast.SequenceExpression(statements)
        elif (protobufExpression.hasMatchExpression())
            val me = protobufExpression.getMatchExpression()
            val e = expressionFromProtobuf(me.getExpression())
            var elseClause: Option[wyb_ast.Expression] = option.None[wyb_ast.Expression]()
            if (me.hasElse())
                elseClause = option.Some(expressionFromProtobuf(me.getElse()))
            val ml: List[Dyn] = support.dynToList(me.getArmsList())
            val arms = ml.map[wyb_ast.MatchArm]((s: Dyn) => matchArmFromProtobuf(s))
            wyb_ast.MatchExpression(e, arms, elseClause)
        elif (protobufExpression.hasAccessExpression())
            val ae = protobufExpression.getAccessExpression()
            val e = expressionFromProtobuf(ae.getExpression())
            val f = ae.getField()
            wyb_ast.AccessExpression(e, f)
        elif (protobufExpression.hasAssignmentExpression())
            val ae = protobufExpression.getAssignmentExpression()
            val e = expressionFromProtobuf(ae.getExpression())
            val f = ae.getField()
            val v = expressionFromProtobuf(ae.getValue())
            wyb_ast.AssignmentExpression(e, f, v)
        else
            runtime.fail("invalid proto expression type")

def matchArmFromProtobuf(protobufMatchArm: Dyn): wyb_ast.MatchArm
    val v = protobufMatchArm.getVariable()
    val p = protobufMatchArm.getPath()
    val e = expressionFromProtobuf(protobufMatchArm.getExpression())
    wyb_ast.MatchArm(v, p, e)
